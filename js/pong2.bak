const GAME_WIDTH = 400
const GAME_HEIGHT = 600
const PADDLE1_INITIAL_POS = {x: 200, y: 550,}
const PADDLE2_INITIAL_POS = {x: 200, y: 50,}

function Game() {
	this.width = GAME_WIDTH
	this.height = GAME_HEIGHT
	this.actors = [new Player({initialPaddlePos: PADDLE1_INITIAL_POS, name: "player1"}), new Player({initialPaddlePos: PADDLE2_INITIAL_POS, name: "player2"})]
	this.gameReady = false
}
Game.prototype.begin = function () {
	this.actors.forEach(actor => {actor.setPaddle(new Paddle(actor.initialPaddlePos))})
	this.gameReady = true;
}
Game.prototype.animate = function () {
	if (gameReady) {
	}
}


function Player({initialPaddlePos: initialPaddlePos, name: name}) {
	this.initialPaddlePos = initialPaddlePos;
	this.name = name;
	this.paddle = null;
	this.score = 0;
}
Player.prototype.setPaddle = function (paddle) {
	this.paddle = paddle
} 


function Paddle(position) {
	this.position = position
	this.velocity = {xVelocity: 0, yVelocity: 0}
}

//////////////////////////////////////////////// PONG WRAPPER
function runAnimation(frameFunc) {
	let lastTime = null;
	function frame(time) {
		let stop = false;
		if (lastTime != null) {
			let timeStep = Math.min(time - lastTime, 100) /1000;
			stop = frameFunc(timeStep) === false;
		}
		lastTime = time;
		if(!stop) 
			requestAnimationFrame(frame);
	}
	requestAnimationFrame(frame);
}

function runPong() {
	let game = new Game();

	let display = new CanvasDisplay(document.body, game);
	runAnimation(function(step) {
		game.animate(step);
		display.drawFrame(step);
	});

	game.begin()
}

$(document).ready(function() {
	console.log("START");
	runPong();
});

//////////////////////////////////////////CANVAS

const CANVAS_WIDTH = 400;
const CANVAS_HEIGHT = 600;

function CanvasDisplay(parent, game) {
	this.canvas = document.createElement("canvas");
	this.canvas.width = CANVAS_WIDTH;
	this.canvas.height = CANVAS_HEIGHT;
	parent.appendChild(this.canvas);
	this.cx = this.canvas.getContext("2d");

	this.game = game;
	this.animationTime = 0;
	this.drawFrame(0);
}

CanvasDisplay.prototype.drawFrame = function(step) {
	this.animationTime += step;

	this.drawBackground();
	this.drawActors();
}

CanvasDisplay.prototype.drawBackground = function () {
	this.cx.filleStyle = "#000000";
	this.cx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
};

CanvasDisplay.prototype.drawActors = function () {
	this.game.actors.map(actor => {

		if (!actor.paddle) {return}
		paddlePos = actor.paddle.position
		console.log(paddlePos)
	
		this.cx.fillStyle = "#FF0000";
		this.cx.fillRect(paddlePos.x, paddlePos.y, 50, 20);
	})
};

let animate = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
	window.setTimeout(callback, 1000 / 60)
};
